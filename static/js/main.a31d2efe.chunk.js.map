{"version":3,"sources":["modules/home/home.component.tsx","modules/list/add-list-modal/add-list-modal.component.tsx","modules/list/remove-list-modal/remove-list-modal.component.tsx","modules/list/list-item/list.component.tsx","modules/list/list/list.component.tsx","components/sortable-list/index.tsx","modules/list/single-list-item/single-list-item.component.tsx","modules/list/list.module.tsx","app-router.tsx","components/content/content.component.tsx","components/side-bar/components/inviteFriends.tsx","components/side-bar/constants.tsx","components/side-bar/item/side-bar-item.component.tsx","components/side-bar/index.tsx","App.tsx","modules/services/user-auth.service.tsx","components/login/signIn/signIn.tsx","components/login/signUp/signUp.tsx","components/login/index.tsx","serviceWorker.ts","index.tsx"],"names":["HomeComponent","Component","GET_LIST_ITEMS","gql","ADD_TODO_LIST","AddListModal","React","useState","open","setOpen","titleInputRef","createRef","commentInputRef","useMutation","addTodo","handleClose","className","Button","onClick","variant","color","endIcon","Modal","onClose","onSubmit","e","preventDefault","current","variables","title","value","comment","refetchQueries","query","TextField","label","fullWidth","inputRef","multiline","rows","type","REMOVE_TODO_LIST","RemoveListModalComponent","props","removeTodo","IconButton","size","aria-label","component","id","MyTypography","styled","Typography","fontSize","ListItemComponent","listLength","this","items","length","Card","CardContent","Box","CardActions","clicked","ListComponent","useQuery","loading","error","data","todos","map","listItem","key","history","push","match","url","SortableList","ev","targetItemIndex","Number","dataTransfer","getData","itemIndex","locateSortableItemParent","target","afterItemIndex","findIndex","singleItem","index","onOrderChange","item","newIndex","setData","toString","element","getAttribute","parentElement","children","sort","itemA","itemB","draggable","item-index","onDrop","event","onDragOver","onDragStart","dragStart","GET_TODO","EDIT_TODO","ADD_TODO_ITEM","EDIT_TODO_ITEM","REMOVE_TODO_ITEM","SingleListItemComponent","itemsToAdd","setItemsToAdd","addTodoItemOpen","setAddTodoItemOpen","validTitle","setValidTitle","setTitle","setComment","setItems","params","todoId","editTodo","addTodoItem","editTodoItem","removeTodoItem","handleTodoItemClose","getCopyOfGivenItems","givenItems","copiedItems","forEach","useEffect","todo","message","required","onChange","onBlur","isTitleValid","trim","hidden","disabled","split","content","changedItem","Checkbox","checked","done","newContent","itemsForState","editedItemIndex","editSelectedItem","originalItem","find","isContentChanged","ListModule","path","exact","AppRouter","ContentComponent","InviteFriends","showModal","setShowModal","inviteEmail","setInviteEmail","ADD_INVITE_EMAIL","addInviteEmail","Dialog","aria-labelledby","user","DialogTitle","DialogContent","DialogContentText","autoFocus","margin","DialogActions","tag","icon","SideBarItemComponent","to","SideBar","urls","singleUrl","App","UserAuthService","createContext","state","setState","UserAuthServiceContainer","isLoggedIn","newVal","Provider","setNewUserState","bind","SignIn","email","setEmail","password","setPassword","Consumer","Avatar","align","evt","alert","name","autoComplete","SignUp","setName","lastName","setLastName","SIGNUP","signUp","Grid","container","spacing","xs","sm","LoginComponent","showSignUp","setShowSignUp","Container","maxWidth","justify","Link","href","Boolean","window","location","hostname","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","IsLoggedIn","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a31d2efe.chunk.js","sourcesContent":["import { Component } from 'react';\n\nexport default class HomeComponent extends Component {\n  render() {\n    return 'This is a home component';\n  }\n}\n","import { useMutation } from '@apollo/react-hooks';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport TextField from '@material-ui/core/TextField';\nimport AddIcon from '@material-ui/icons/Add';\nimport gql from 'graphql-tag';\nimport React from 'react';\nimport './add-list-modal.component.scss';\n\nconst GET_LIST_ITEMS = gql`\n  query TodoItems {\n    todos {\n      id\n      title\n      comment\n      items {\n        content\n        done\n        created\n      }\n    }\n  }\n`;\n\nconst ADD_TODO_LIST = gql`\n  mutation addTodo($title: String!, $comment: String) {\n    addTodo(title: $title, comment: $comment) {\n      id\n      title\n      comment\n    }\n  }\n`;\n\nexport default function AddListModal() {\n  const [open, setOpen] = React.useState(false);\n\n  const titleInputRef = React.createRef<HTMLInputElement>();\n  const commentInputRef = React.createRef<HTMLTextAreaElement>();\n\n  const [addTodo] = useMutation(ADD_TODO_LIST);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className='modal-wrapper'>\n      <Button onClick={handleOpen} variant='contained' color='primary' className='add-button' endIcon={<AddIcon />}>\n        Add List\n      </Button>\n      <Modal open={open} onClose={handleClose}>\n        <div className='modal-inner'>\n          <h2>Add a new ToDo list</h2>\n          <form\n            className='add-list-form'\n            onSubmit={e => {\n              e.preventDefault();\n              if (titleInputRef.current && commentInputRef.current) {\n                addTodo({\n                  variables: {\n                    title: titleInputRef.current.value,\n                    comment: commentInputRef.current.value,\n                  },\n                  refetchQueries: [{ query: GET_LIST_ITEMS }],\n                });\n                titleInputRef.current.value = '';\n                commentInputRef.current.value = '';\n                handleClose();\n              }\n            }}>\n            <TextField label='Title' fullWidth={true} inputRef={titleInputRef} />\n            <TextField label='Comment' multiline={true} rows='5' fullWidth={true} inputRef={commentInputRef} />\n            <Button type='submit' variant='contained' color='primary' className='submit-button'>\n              Add Todo\n            </Button>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n","import { useMutation } from '@apollo/react-hooks';\nimport { IconButton } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport gql from 'graphql-tag';\nimport React from 'react';\nimport './remove-list-modal.component.scss';\n\ninterface RemoveListProps {\n  id: string;\n}\n\nconst GET_LIST_ITEMS = gql`\n  query TodoItems {\n    todos {\n      id\n      title\n      comment\n      items {\n        content\n        done\n        created\n      }\n    }\n  }\n`;\n\nconst REMOVE_TODO_LIST = gql`\n  mutation removeTodoList($id: String!) {\n    removeTodo(id: $id)\n  }\n`;\n\nconst RemoveListModalComponent: React.FC<RemoveListProps> = props => {\n  const [open, setOpen] = React.useState(false);\n\n  const [removeTodo] = useMutation(REMOVE_TODO_LIST);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <IconButton size='small' className='delete-button' color='secondary' title='Remove list' aria-label='Remove list' component='span' onClick={handleOpen}>\n        <DeleteIcon />\n      </IconButton>\n      <Modal open={open} onClose={handleClose}>\n        <div className='modal-inner'>\n          <h2>Are you sure you want to remove this list?</h2>\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n              removeTodo({\n                variables: { id: props.id },\n                refetchQueries: [{ query: GET_LIST_ITEMS }],\n              });\n              handleClose();\n            }}>\n            <Button type='reset' onClick={handleClose}>\n              Cancel\n            </Button>\n            <Button type='submit'>Yes</Button>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default RemoveListModalComponent;\n","import { Box, Button, Card, CardActions, CardContent, styled, Typography } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport RemoveListModalComponent from '../remove-list-modal/remove-list-modal.component';\nimport './list-item.component.scss';\nimport { ListItemComponentModel } from './list-item.model';\n\nconst MyTypography = styled(Typography)({\n  fontSize: 14,\n});\n\nexport default class ListItemComponent extends Component<ListItemComponentModel> {\n  render() {\n    const listLength = this.props.items.length;\n    return (\n      <Card className='card-wrapper'>\n        <CardContent>\n          <h3 color='textPrimary'>{this.props.title}</h3>\n          <Typography variant='caption'>\n            <span>{listLength + ' item' + (listLength !== 1 ? 's' : '')}</span>\n          </Typography>\n          <Box className='list-comment'>\n            <MyTypography color='textSecondary' variant='body2'>\n              {this.props.comment}\n            </MyTypography>\n          </Box>\n        </CardContent>\n        <CardActions className='card-actions'>\n          <Button size='small' onClick={this.props.clicked}>\n            Edit List\n          </Button>\n          <RemoveListModalComponent id={this.props.id} />\n        </CardActions>\n      </Card>\n    );\n  }\n}\n","import { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport React, { Fragment } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport AddListModal from '../add-list-modal/add-list-modal.component';\nimport { Todo } from '../list-item/list-item.model';\nimport ListItemComponent from '../list-item/list.component';\n\nconst GET_LIST_ITEMS = gql`\n  query TodoItems {\n    todos {\n      id\n      title\n      comment\n      items {\n        content\n        done\n        created\n      }\n    }\n  }\n`;\n\ninterface WrappedListItem {\n  todos: Todo[];\n}\n\nconst ListComponent: React.FC<RouteComponentProps> = props => {\n  const { loading, error, data } = useQuery<WrappedListItem>(GET_LIST_ITEMS);\n\n  return (\n    <Fragment>\n      <AddListModal />\n      {loading ? <p>Loading ...</p> : null}\n      {error ? <p>There was an error fetching the list, please try again. </p> : null}\n      {!data || !data.todos.length ? <p>No Todo lists available. </p> : null}\n      {data\n        ? data.todos.map(listItem => (\n            <ListItemComponent\n              key={listItem.id}\n              {...listItem}\n              clicked={() => {\n                props.history.push(`${props.match.url}/${listItem.id}`);\n              }}\n            />\n          ))\n        : null}\n    </Fragment>\n  );\n};\n\nexport default ListComponent;\n","import DragIndicator from '@material-ui/icons/DragIndicator';\nimport React, { Component } from 'react';\nimport './sortable-list.component.scss';\n\ntype SortableItem<T> = T & { index: number };\n\ninterface SortableListComponent<T> {\n  items: SortableItem<T>[];\n  onOrderChange?: (data: { item: SortableItem<T>; newIndex: number }) => void;\n}\n\nexport default class SortableList<T> extends Component<SortableListComponent<T>> {\n  onDrop(ev: React.DragEvent<HTMLDivElement>) {\n    ev.preventDefault();\n    const targetItemIndex = Number(ev.dataTransfer.getData('text'));\n    const itemIndex = Number(this.locateSortableItemParent(ev.target as HTMLElement));\n\n    const afterItemIndex = this.props.items.findIndex(singleItem => singleItem.index === itemIndex);\n\n    if (this.props.onOrderChange) {\n      if (this.props.items.length - 1 === afterItemIndex) {\n        this.props.onOrderChange({\n          item: this.props.items[targetItemIndex],\n          newIndex: afterItemIndex + 1,\n        });\n      } else {\n        // Example 5 - 4 / 2 + 4 = 4.5 the new index\n        const newIndex = (this.props.items[afterItemIndex + 1].index - this.props.items[afterItemIndex].index) / 2 + this.props.items[afterItemIndex].index;\n        this.props.onOrderChange({\n          item: this.props.items[targetItemIndex],\n          newIndex,\n        });\n      }\n    }\n  }\n\n  dragStart(ev: React.DragEvent<HTMLDivElement>, index: number) {\n    ev.dataTransfer.setData('text', index.toString());\n  }\n\n  locateSortableItemParent(element: HTMLElement): string {\n    const index = element.getAttribute('item-index');\n    return index || (element.parentElement && this.locateSortableItemParent(element.parentElement)) || '';\n  }\n\n  render() {\n    const { children, items } = this.props;\n    if (!children) {\n      return 'SortableList must have children';\n    }\n\n    return (\n      <div className='sortable-list'>\n        {items\n          .sort((itemA, itemB) => itemA.index - itemB.index)\n          .map((singleItem, index) => (\n            <div\n              className='sortable-item'\n              draggable={true}\n              key={'draggable_' + index}\n              item-index={singleItem.index}\n              onDrop={event => this.onDrop(event)}\n              onDragOver={ev => ev.preventDefault()}\n              onDragStart={ev => this.dragStart(ev, index)}>\n              <div className='sortable-item-drag'>\n                <DragIndicator />\n              </div>\n              <div className='sortable-item-content'>{(children as (item: T) => T)(singleItem)}</div>\n            </div>\n          ))}\n      </div>\n    );\n  }\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport { Button, Checkbox, IconButton, Modal, TextField } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport gql from 'graphql-tag';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport SortableList from '../../../components/sortable-list';\nimport { Todo, TodoItem } from '../list-item/list-item.model';\nimport './single-list-item.component.scss';\n\ninterface WrappedTodo {\n  todo: Todo;\n}\n\nconst GET_TODO = gql`\n  query todo($id: String!) {\n    todo(id: $id) {\n      id\n      title\n      comment\n      items {\n        id\n        todoId\n        content\n        done\n        created\n        index\n      }\n    }\n  }\n`;\n\nconst EDIT_TODO = gql`\n  mutation editTodo($id: String!, $title: String, $comment: String) {\n    editTodo(id: $id, title: $title, comment: $comment) {\n      id\n      title\n      comment\n    }\n  }\n`;\n\nconst ADD_TODO_ITEM = gql`\n  mutation addTodoItem($todoId: String!, $content: String!) {\n    addTodoItem(todoId: $todoId, content: $content) {\n      index\n    }\n  }\n`;\n\nconst EDIT_TODO_ITEM = gql`\n  mutation editTodoItem($todoId: String!, $id: String!, $content: String, $done: Boolean, $index: Float) {\n    editTodoItem(todoId: $todoId, id: $id, content: $content, done: $done, index: $index) {\n      id\n      todoId\n      content\n      done\n      created\n      index\n    }\n  }\n`;\n\nconst REMOVE_TODO_ITEM = gql`\n  mutation removeTodoItem($todoId: String!, $id: String!) {\n    removeTodoItem(todoId: $todoId, id: $id)\n  }\n`;\n\nconst SingleListItemComponent: React.FC<RouteComponentProps<{\n  todoId: string;\n}>> = props => {\n  const [itemsToAdd, setItemsToAdd] = useState('');\n  const [addTodoItemOpen, setAddTodoItemOpen] = useState(false);\n  const [validTitle, setValidTitle] = useState(true);\n  const [title, setTitle] = useState('');\n  const [comment, setComment] = useState('');\n  const [items, setItems] = useState<TodoItem[]>([]);\n\n  const { data, loading, error } = useQuery<WrappedTodo>(GET_TODO, {\n    variables: { id: props.match.params.todoId },\n  });\n\n  const [editTodo] = useMutation(EDIT_TODO);\n  const [addTodoItem] = useMutation(ADD_TODO_ITEM, {\n    refetchQueries: [\n      {\n        query: GET_TODO,\n        variables: { id: props.match.params.todoId },\n      },\n    ],\n  });\n  const [editTodoItem] = useMutation(EDIT_TODO_ITEM);\n  const [removeTodoItem] = useMutation(REMOVE_TODO_ITEM, {\n    refetchQueries: [\n      {\n        query: GET_TODO,\n        variables: { id: props.match.params.todoId },\n      },\n    ],\n  });\n\n  const handleTodoItemOpen = () => {\n    setAddTodoItemOpen(true);\n  };\n\n  const handleTodoItemClose = () => {\n    setItemsToAdd('');\n    setAddTodoItemOpen(false);\n  };\n\n  const getCopyOfGivenItems = (givenItems: TodoItem[] = []): TodoItem[] => {\n    const copiedItems: TodoItem[] = [];\n    givenItems?.forEach(item => copiedItems.push({ ...item }));\n    return copiedItems;\n  };\n\n  const editSelectedItem = (id: string, newContent: string) => {\n    const itemsForState = getCopyOfGivenItems(items);\n    const editedItemIndex = itemsForState.findIndex(item => item.id === id);\n    itemsForState[editedItemIndex].content = newContent;\n    setItems(itemsForState);\n  };\n\n  const isContentChanged = (id: string, newContent: string): boolean => {\n    const originalItem = data?.todo.items.find(item => item.id === id);\n    return originalItem?.content !== newContent;\n  };\n\n  useEffect(() => {\n    setTitle(data?.todo.title ?? '');\n    setComment(data?.todo.comment ?? '');\n    setItems(getCopyOfGivenItems(data?.todo.items));\n  }, [data]);\n\n  if (loading) return <p>Loading ...</p>;\n  if (error) return <p>ERROR: {error.message}</p>;\n  if (!data) return <p>There is no data for selected todo.</p>;\n\n  return (\n    <Fragment>\n      <h2>Edit {data.todo.title}</h2>\n      <TextField\n        label='Title'\n        fullWidth={true}\n        value={title}\n        required={true}\n        onChange={e => setTitle(e.target.value)}\n        onBlur={e => {\n          const isTitleValid = e.target.value.trim().length > 0;\n          if (isTitleValid && e.target.value !== data?.todo.title) {\n            editTodo({\n              variables: {\n                id: data.todo.id,\n                title: e.target.value,\n              },\n            });\n          }\n          setValidTitle(isTitleValid);\n        }}\n      />\n      <em hidden={validTitle}>Title is required</em>\n      <TextField\n        label='Comment'\n        fullWidth={true}\n        value={comment}\n        onChange={e => setComment(e.target.value)}\n        onBlur={e => {\n          if (e.target.value !== data?.todo.comment) {\n            editTodo({\n              variables: {\n                id: data.todo.id,\n                comment: e.target.value,\n              },\n            });\n          }\n        }}\n      />\n      <div className='todo-item-list'>\n        <div className='todo-item-container'>\n          <h4>Items</h4>\n          <IconButton onClick={handleTodoItemOpen} color='primary' title='Add items' size='small'>\n            <AddIcon />\n          </IconButton>\n        </div>\n        <Modal open={addTodoItemOpen} onClose={handleTodoItemClose}>\n          <div className='modal-inner'>\n            <h2>Add new Todo items</h2>\n            <p>You can add more todo items at once by dividing them with enter</p>\n            <TextField multiline={true} label='Items' rows='4' fullWidth={true} onChange={e => setItemsToAdd(e.target.value)} />\n            <div className='modal-bottom-container'>\n              <Button\n                variant='contained'\n                color='primary'\n                disabled={itemsToAdd.trim().length === 0}\n                onClick={() => {\n                  const dividedTodoItems = itemsToAdd.split('\\n');\n                  dividedTodoItems.forEach(item => {\n                    if (item.trim().length !== 0) {\n                      addTodoItem({\n                        variables: {\n                          todoId: data.todo.id,\n                          content: item,\n                        },\n                      });\n                    }\n                  });\n                  handleTodoItemClose();\n                }}>\n                Add todo items\n              </Button>\n              <Button variant='contained' color='default' className='cancel-button' onClick={() => handleTodoItemClose()}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </Modal>\n        <SortableList\n          items={items}\n          onOrderChange={({ item: changedItem, newIndex }) => {\n            editTodoItem({\n              variables: {\n                ...changedItem,\n                index: newIndex,\n              },\n            });\n          }}>\n          {(item: TodoItem) => (\n            <div key={item.id} className='todo-item-container'>\n              <Checkbox\n                checked={item.done}\n                color='primary'\n                onChange={e => {\n                  editTodoItem({\n                    variables: {\n                      ...item,\n                      done: e.target.checked,\n                    },\n                  });\n                }}\n              />\n\n              <TextField\n                fullWidth={true}\n                value={item.content}\n                onChange={e => editSelectedItem(item.id, e.target.value)}\n                onBlur={e => {\n                  if (isContentChanged(item.id, item.content)) {\n                    editTodoItem({\n                      variables: {\n                        ...item,\n                        content: e.target.value,\n                      },\n                    });\n                  }\n                }}\n              />\n\n              <IconButton\n                color='secondary'\n                title='Remove item'\n                component='span'\n                size='small'\n                onClick={() => {\n                  removeTodoItem({\n                    variables: {\n                      todoId: item.todoId,\n                      id: item.id,\n                    },\n                  });\n                }}>\n                <DeleteIcon />\n              </IconButton>\n            </div>\n          )}\n        </SortableList>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default SingleListItemComponent;\n","import React, { Component } from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router';\nimport ListComponent from './list/list.component';\nimport SingleListItemComponent from './single-list-item/single-list-item.component';\n\nexport default class ListModule extends Component<RouteComponentProps> {\n  render() {\n    return (\n      <Switch>\n        <Route path={this.props.match.url} exact={true} component={ListComponent} />\n        <Route path={`${this.props.match.url}/:todoId`} component={SingleListItemComponent} />\n      </Switch>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport HomeComponent from './modules/home/home.component';\nimport ListModule from './modules/list/list.module';\n\nexport default class AppRouter extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact={true} path='/' component={HomeComponent} />\n        <Route path='/list' component={ListModule} />\n      </Switch>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './content.component.scss';\n\nexport default class ContentComponent extends Component<{\n  className?: string;\n}> {\n  render() {\n    return <div className={`content-container ${this.props.className}`}>{this.props.children}</div>;\n  }\n}\n","import { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport React, { useState } from 'react';\nimport './inviteFriends.scss';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\n\nconst InviteFriends = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [inviteEmail, setInviteEmail] = useState('');\n\n  const ADD_INVITE_EMAIL = gql`\n    mutation addInviteEmail($user: String, $inviteEmail: String) {\n      addInviteEmail(user: $user, inviteEmail: $inviteEmail) {\n        id\n        inviteEmail\n      }\n    }\n  `;\n  const [addInviteEmail] = useMutation(ADD_INVITE_EMAIL);\n\n  return (\n    <>\n      <div\n        className='add-user-box'\n        onClick={() => {\n          setShowModal(!showModal);\n        }}>\n        <p>Invite Friend</p>\n        <div className='add-user-icon'>\n          <PersonAddIcon />\n        </div>\n      </div>\n      <Dialog\n        open={showModal}\n        onClose={() => {\n          setShowModal(!showModal);\n        }}\n        aria-labelledby='form-dialog-title'>\n        <form\n          onSubmit={e => {\n            e.preventDefault();\n            addInviteEmail({\n              variables: {\n                user: 'userId',\n                inviteEmail,\n              },\n            });\n          }}>\n          <DialogTitle id='form-dialog-title'>Add friend</DialogTitle>\n          <DialogContent>\n            <DialogContentText>To add your friend, please enter his or her email address here.</DialogContentText>\n\n            <TextField\n              autoFocus={true}\n              margin='dense'\n              id='name'\n              label='Email Address'\n              type='email'\n              fullWidth={true}\n              onChange={e => {\n                setInviteEmail(e.target.value);\n              }}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={() => {\n                setShowModal(!showModal);\n              }}\n              color='primary'>\n              Cancel\n            </Button>\n            <Button type='submit' color='primary'>\n              Send invitation\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  );\n};\n\nexport default InviteFriends;\n","import HomeIcon from '@material-ui/icons/Home';\nimport ListIcon from '@material-ui/icons/List';\nimport React from 'react';\n\nexport interface SideBarItem {\n  tag: string;\n  url: string;\n  icon?: JSX.Element;\n}\n\nexport default [\n  {\n    tag: 'Home',\n    url: '/',\n    icon: <HomeIcon />,\n  },\n  {\n    tag: 'List',\n    url: '/list',\n    icon: <ListIcon />,\n  },\n] as SideBarItem[];\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { SideBarItem } from '../constants';\nimport './side-bar-item.component.scss';\n\nexport default class SideBarItemComponent extends Component<SideBarItem> {\n  render() {\n    return (\n      <Link className='side-bar-item' to={this.props.url}>\n        <span>{this.props.tag}</span>\n        {this.props.icon}\n      </Link>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport InviteFriends from './components/inviteFriends';\nimport urls, { SideBarItem } from './constants';\nimport SideBarItemComponent from './item/side-bar-item.component';\nimport './side-bar.component.scss';\n\nexport default class SideBar extends Component {\n  render() {\n    return (\n      <div id='app-sidebar'>\n        {urls.map((singleUrl: SideBarItem, index: number) => (\n          <SideBarItemComponent key={index} tag={singleUrl.tag} url={singleUrl.url} icon={singleUrl.icon} />\n        ))}\n        <InviteFriends />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport MainAppRouter from './app-router';\nimport ContentComponent from './components/content/content.component';\nimport SideBar from './components/side-bar';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div id='app-container'>\n        <BrowserRouter>\n          <SideBar />\n          <ContentComponent>\n            <MainAppRouter />\n          </ContentComponent>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport interface UserAuthServiceModel {\n  state: boolean;\n  setState: (v: boolean) => void;\n}\n\nexport const UserAuthService = React.createContext<UserAuthServiceModel>({\n  state: false,\n  setState: () => void 0,\n});\n\nexport default class UserAuthServiceContainer extends Component {\n  state = {\n    isLoggedIn: false,\n  };\n\n  setNewUserState(newVal: boolean) {\n    this.setState({ isLoggedIn: newVal });\n  }\n\n  render() {\n    return (\n      <UserAuthService.Provider\n        value={{\n          state: this.state.isLoggedIn,\n          setState: this.setNewUserState.bind(this),\n        }}>\n        {this.props.children}\n      </UserAuthService.Provider>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport { UserAuthService } from '../../../modules/services/user-auth.service';\nimport '../login.scss';\n\nimport { Avatar, Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n\nconst SignIn = () => {\n  const [email, setEmail] = useState('dude@gmail.com');\n  const [password, setPassword] = useState('1234');\n\n  const checkEmail = () => {\n    if (email !== 'dude@gmail.com' || password !== '1234') {\n      alert('Wrong password dude/et');\n    }\n    return email === 'dude@gmail.com' && password === '1234';\n  };\n\n  return (\n    <div className='fade-in'>\n      <UserAuthService.Consumer>\n        {state => (\n          <>\n            <div className='login-label-box'>\n              <Avatar className='avatar'>\n                <LockOutlinedIcon />\n              </Avatar>\n              <Typography component='h1' variant='h5' align='center'>\n                Login\n              </Typography>\n            </div>\n            <form\n              onSubmit={evt => {\n                evt.preventDefault();\n                state.setState(checkEmail());\n              }}>\n              <TextField\n                variant='outlined'\n                required={true}\n                fullWidth={true}\n                id='email'\n                label='Email Address'\n                name='email'\n                autoComplete='email'\n                onChange={e => setEmail(e.target.value)}\n                value={email}\n              />\n              <TextField\n                variant='outlined'\n                required={true}\n                fullWidth={true}\n                name='password'\n                label='Password'\n                type='password'\n                id='password'\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n              />\n              <Button type='submit' fullWidth={true} variant='contained' color='primary'>\n                Submit\n              </Button>\n            </form>\n          </>\n        )}\n      </UserAuthService.Consumer>\n    </div>\n  );\n};\n\nexport default SignIn;\n","import { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport React, { useState } from 'react';\nimport '../login.scss';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n\nconst SignUp = () => {\n  const [name, setName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const SIGNUP = gql`\n    mutation signUp($name: String!, $lastName: String!, $email: String!, $password: String!) {\n      signUp(name: $name, lastName: $lastName, email: $email, password: $password) {\n        token\n        user {\n          name\n        }\n      }\n    }\n  `;\n  const [signUp] = useMutation(SIGNUP);\n\n  return (\n    <div className='fade-in'>\n      <div className='login-label-box'>\n        <Avatar className='avatar'>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component='h1' variant='h5' align='center'>\n          Sign up\n        </Typography>\n      </div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          signUp({\n            variables: {\n              name,\n              lastName,\n              email,\n              password,\n            },\n          });\n        }}>\n        <Grid container={true} spacing={2}>\n          <Grid item={true} xs={12} sm={6}>\n            <TextField\n              autoComplete='fname'\n              name='firstName'\n              variant='outlined'\n              required={true}\n              fullWidth={true}\n              id='firstName'\n              label='First Name'\n              autoFocus={true}\n              onChange={e => {\n                setName(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid item={true} xs={12} sm={6}>\n            <TextField\n              variant='outlined'\n              required={true}\n              fullWidth={true}\n              id='lastName'\n              label='Last Name'\n              name='lastName'\n              autoComplete='lname'\n              onChange={e => {\n                setLastName(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid item={true} xs={12}>\n            <TextField\n              variant='outlined'\n              required={true}\n              fullWidth={true}\n              id='email'\n              label='Email Address'\n              name='email'\n              autoComplete='email'\n              onChange={e => {\n                setEmail(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid item={true} xs={12}>\n            <TextField\n              variant='outlined'\n              required={true}\n              fullWidth={true}\n              name='password'\n              label='Password'\n              type='password'\n              id='password'\n              autoComplete='current-password'\n              onChange={e => {\n                setPassword(e.target.value);\n              }}\n            />\n          </Grid>\n        </Grid>\n        <Button type='submit' fullWidth={true} variant='contained' color='primary'>\n          Sign Up\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import React, { useState } from 'react';\nimport ContentComponent from '../content/content.component';\nimport './login.scss';\nimport SignIn from './signIn/signIn';\nimport SignUp from './signUp/signUp';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\n\nconst LoginComponent = () => {\n  const [showSignUp, setShowSignUp] = useState(false);\n\n  return (\n    <ContentComponent className='center'>\n      <Container component='main' maxWidth='xs'>\n        <div className='login-form'>\n          {!showSignUp ? (\n            <>\n              <SignIn />\n              <Grid container={true} justify='center'>\n                <Grid item={true}>\n                  <Link\n                    href='#'\n                    variant='body2'\n                    onClick={() => {\n                      setShowSignUp(!showSignUp);\n                    }}>\n                    Don't have an account?\n                  </Link>\n                </Grid>\n              </Grid>\n            </>\n          ) : (\n            <>\n              <SignUp />\n              <Grid container={true} justify='center'>\n                <Grid item={true}>\n                  <Link\n                    href='#'\n                    variant='body2'\n                    onClick={() => {\n                      setShowSignUp(!showSignUp);\n                    }}>\n                    Already have an account? Sign in\n                  </Link>\n                </Grid>\n              </Grid>\n            </>\n          )}\n        </div>\n      </Container>\n    </ContentComponent>\n  );\n};\n\nexport default LoginComponent;\n","// tslint:disable\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport LoginComponent from './components/login';\nimport './index.scss';\nimport UserAuthServiceContainer, { UserAuthService, UserAuthServiceModel } from './modules/services/user-auth.service';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'http://localhost:4001/',\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link,\n});\n\nclass IsLoggedIn extends Component {\n  render() {\n    return (\n      <UserAuthServiceContainer>\n        <UserAuthService.Consumer>\n          {(state: UserAuthServiceModel) => {\n            if (state.state) {\n              return <App />;\n            }\n            return <LoginComponent />;\n          }}\n        </UserAuthService.Consumer>\n      </UserAuthServiceContainer>\n    );\n  }\n}\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <IsLoggedIn />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}